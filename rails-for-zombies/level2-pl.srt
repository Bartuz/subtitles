1
00:00:00,900 --> 00:00:03,030
Cześć, jestem Gregg Pollack,
i Wy oglądacie Rails for Zombies

2
00:00:03,030 --> 00:00:04,790
Epizod Drugi.

3
00:00:04,790 --> 00:00:04,930
[ŚPIEWANIE]

4
00:00:04,930 --> 00:00:07,376
Odłóż mózg swój
i wnętrzności swe.

5
00:00:07,376 --> 00:00:12,678
Nadszedł czas by przestać
i pouczyć się Rails, bo

6
00:00:12,678 --> 00:00:14,124
coś nowego do złapania jest.

7
00:00:14,124 --> 00:00:16,124
To Rails for Zombies
przez Envy Labs.

Translation Credits
00:00:16,124--> 00:00:18,530
Tłumaczenie: Filip.Bartuzi.me
Korekta: Krzysztof Kanabaj

8
00:00:18,530 --> 00:00:20,080
W części drugiej, zamierzamy
zająć się

9
00:00:20,080 --> 00:00:23,780
modelami, rzecz jasna.

10
00:00:23,780 --> 00:00:27,050
W poprzednim rozdziale,
mieliśmy kod

11
00:00:27,050 --> 00:00:28,040
Tweet.find(3)

12
00:00:28,040 --> 00:00:32,320
I w jakiś sposób rzutowało to
na tę tabele w bazie danych.

13
00:00:32,320 --> 00:00:34,950
Ale oczywiście brakuje czegoś
między tymi dwoma

14
00:00:34,950 --> 00:00:37,960
fragmentami kodu, które
współgrają ze sobą.

15
00:00:37,960 --> 00:00:39,800
To moment gdzie,
wchodzą modele.

16
00:00:39,800 --> 00:00:43,790
W tym wypadku mamy model Tweet,
które jest po prostu zwyczajną

17
00:00:43,790 --> 00:00:45,580
klasą Ruby.

18
00:00:45,580 --> 00:00:50,830
Kiedy wywołujemy Tweet z
wielkiej litery, Rails

19
00:00:50,830 --> 00:00:54,420
odniesie się do tej klasy Tweet.

20
00:00:54,420 --> 00:00:57,020
Ona dziedziczy z
ActiveRecord::Base

21
00:00:57,020 --> 00:00:59,740
W zasadzie to klasa odwołuje się
do tabeli.

22
00:00:59,740 --> 00:01:02,440
Domyślnie Rails zamierza spojrzeć
w bazę danych po tabelę

23
00:01:02,440 --> 00:01:06,730
tweets (w liczbie mnogiej!),
dokładnie jak tutaj.

24
00:01:06,730 --> 00:01:08,710
Przyjrzyjmy się bliżej na to
co się dzieje gdy

25
00:01:08,710 --> 00:01:11,160
wykonamy ten kod.

26
00:01:11,160 --> 00:01:13,080
Zamierzam wywołać
Tweet.find(3)

27
00:01:13,080 --> 00:01:15,630
Tweet w tym wypadku jest klasą.

28
00:01:15,630 --> 00:01:18,210
Wywołamy metodę, znajdź '3'
na klasie, która odwoła się

29
00:01:18,210 --> 00:01:21,220
do bazy danych, znajdzie
wiersz gdzie

30
00:01:21,220 --> 00:01:23,070
ID Tweeta to trzy.

31
00:01:23,070 --> 00:01:27,170
Następnie tworzy nową instancje,
wypełnia go pobranymi danymi

32
00:01:27,170 --> 00:01:31,960
i zapisuje powstały obiekt
do zmiennej 't'.

33
00:01:31,960 --> 00:01:34,580
W pierwszym rozdziale, mogłeś
zauważyć, że było możliwe

34
00:01:34,580 --> 00:01:37,390
stworzenie zombie bez
żadnych danych.

35
00:01:37,390 --> 00:01:40,675
I w tym wypadku, możemy stworzyć
Tweeta która nie ma żadnych

36
00:01:40,675 --> 00:01:42,520
danych, co jest złe.

37
00:01:42,520 --> 00:01:47,340
Oczywiście potrzebujemy sposobu
aby weryfikować nasz model.

38
00:01:47,340 --> 00:01:50,530
Możemy to zrobić przez
dodanie fragmentu kodu.

39
00:01:50,530 --> 00:01:54,240
Tutaj, w klasie Tweet, możemy
dodać weryfikacje obecności

40
00:01:54,240 --> 00:01:58,050
statusu aby upewnić się, że
status jest w modelu zanim

41
00:01:58,050 --> 00:01:59,350
zostanie zapisany.

42
00:01:59,350 --> 00:02:02,660
Gdybyśmy przetestowywali nową
klasę, to wykonanie t = Tweet.new

43
00:02:02,660 --> 00:02:05,950
zwróciłoby nowy,
jeszcze nie zapisany,

44
00:02:05,950 --> 00:02:07,260
obiekt Tweet.

45
00:02:07,260 --> 00:02:09,000
Wywołamy na nim t.save.

46
00:02:09,000 --> 00:02:11,710
Rails zwróci 'false', ponieważ
nie było w stanie zapisać

47
00:02:11,710 --> 00:02:15,030
tego obiektu do bazy danych,
przez niepowodzenie weryfikacji.

48
00:02:15,030 --> 00:02:17,920
Jeśłi wywołamy t.errors, 
otrzymamy hash ze

49
00:02:17,920 --> 00:02:19,840
zwróconymi błędami.

50
00:02:19,840 --> 00:02:22,820
A jeśli wywołamy t.errors[:status]
na określony

51
00:02:22,820 --> 00:02:26,440
key ('klucz'), to otrzymamy
poszczególny błąd.

52
00:02:26,440 --> 00:02:29,690
Rails domyślnie posiada wiele
weryfikatorów, które możemy

53
00:02:29,690 --> 00:02:32,890
użyć, od numerycznych, do
weryfikacji unikalności,

54
00:02:32,890 --> 00:02:36,010
potwierdzenia, akceptacji,
długości, formatu,

55
00:02:36,010 --> 00:02:38,350
i tak dalej, i tak dalej.

56
00:02:38,350 --> 00:02:40,870
Wraz z Rails 3, mamy nową
składnię dla wykonywania

57
00:02:40,870 --> 00:02:41,710
weryfikacji.

58
00:02:41,710 --> 00:02:44,780
Zamiast wykonywania ich pojedyńczo,
możemy napisać

59
00:02:44,780 --> 00:02:48,480
validates :status,
:presence => true.

60
00:02:48,480 --> 00:02:52,850
Mamy więc tutaj atrybut oraz
weryfikator.

61
00:02:52,850 --> 00:02:57,730
Możemy też uzyć validates :status,
:length => { :minimum => 3  

62
00:02:57,730 --> 00:03:00,290
Ale oczywiście, możemy to 
wszystko uprościć, pisząc oba

63
00:03:00,290 --> 00:03:03,190
z nich w jednej linii.

64
00:03:03,190 --> 00:03:05,870
Jest tutaj reszta weryfikatorów,
które widziałeś wcześniej, ale

65
00:03:05,870 --> 00:03:08,830
napisana wraz z nową składnią.

66
00:03:08,830 --> 00:03:11,390
Pora aby porazmawiać, trochę
o relacjach (relationships),

67
00:03:11,390 --> 00:03:15,030
ponieważ one zawsze wędrują w
paczce i dlatego, no wiecie,

68
00:03:15,030 --> 00:03:17,420
potrzebujemy mieć wiele tabel
i ich relacje

69
00:03:17,420 --> 00:03:18,410
między sobą.

70
00:03:18,410 --> 00:03:20,830
Wraz z poprzednim przykładem,
mogłeś zauważyć, że

71
00:03:20,830 --> 00:03:24,720
Zombie Ash miała 2 różne
tweety i wymienaliśmy

72
00:03:24,720 --> 00:03:26,700
jej imie 2 razy. 

73
00:03:26,700 --> 00:03:29,140
To oczywiście nie jest
wydajne.

74
00:03:29,140 --> 00:03:31,760
To co zamierzamy zrobić tutaj,
to rozdzielenie ich na dwie

75
00:03:31,760 --> 00:03:35,410
osobne tabele z zombie.

76
00:03:35,410 --> 00:03:38,820
Oczywiście potrzebujemy teraz
sposobu aby powiązać zombie

77
00:03:38,820 --> 00:03:41,040
z tweetem.

78
00:03:41,040 --> 00:03:44,820
Rails tworzy związek ('association')
poprzez dodanie kolumny

79
00:03:44,820 --> 00:03:48,560
'zombie pokreślnik ID'
do tabeli tweets.

80
00:03:48,560 --> 00:03:52,030
Określamy wtedy ID zombie, który
stworzył danego tweeta,

81
00:03:52,030 --> 00:03:55,810
przez co możemy powiązać
tweeta z zombie.

82
00:03:55,810 --> 00:03:58,720
Jeśli dodamy teraz tweeta, może
tego co mówi 'Twoje powieki

83
00:03:58,720 --> 00:04:02,440
smakuja jak bekon', możemy określić,
który zombie

84
00:04:02,440 --> 00:04:04,660
należy do niego.

85
00:04:04,660 --> 00:04:07,550
Patrząc więc na tabele z bazy 
danych, możemy powiedzieć,

86
00:04:07,550 --> 00:04:10,770
że tweet należy do zombie.

87
00:04:10,770 --> 00:04:14,760
W naszym modelu, aby stworzyć
powiązanie, po prostu dodajemy

88
00:04:14,760 --> 00:04:17,769
belongs_to :zombie.

89
00:04:17,769 --> 00:04:19,310
Ważne jest aby zauwazyć, że
używamy

90
00:04:19,310 --> 00:04:20,980
'zombie' w liczbie pojedyńczej.

91
00:04:20,980 --> 00:04:25,600
Mówimy belongs_to :zombie, ponieważ
jeden tweet należy do

92
00:04:25,600 --> 00:04:27,380
jednego zombie.

93
00:04:27,380 --> 00:04:30,110
Stworzyliśmy właśnie relację 
w jedną stronę.

94
00:04:30,110 --> 00:04:34,080
Jak stworzyć relację w drugą 
stronę i po prostu powiedzieć,

95
00:04:34,080 --> 00:04:38,810
że zombie ma wiele tweetów?

96
00:04:38,810 --> 00:04:41,470
Jeśli spojrzysz na ten model, 
to aby powiązać je, starczy

97
00:04:41,470 --> 00:04:45,570
napisać
has_many :tweets.

98
00:04:45,570 --> 00:04:47,880
Mamy teraz poprawne powiązanie
u każdego z tych 

99/100
00:04:47,880 --> 00:04:51,210
modeli, więc czas się nimi 
pobawić w konsoli Rails.

101
00:04:51,210 --> 00:04:55,000
Zamierzamy teraz pobrać zombie,
następnie stworzyć tweeta

102
00:04:55,000 --> 00:04:59,013
dla tego zombie przez wywołanie
Tweet.create, wypełnienić

103
00:04:59,013 --> 00:05:03,180
status oraz określić
zombie.

104
00:05:03,180 --> 00:05:06,550
Zauważysz, że w drugiej linii
tweet zostaje zapisany i

105
00:05:06,550 --> 00:05:08,250
przechowany w zmiennej 't'.

106
00:05:08,250 --> 00:05:12,580
Możemy wywołać t.zombie aby
otrzymać powiązany obiekt zombie

107
00:05:12,580 --> 00:05:16,430
z tym tweetem, jak i t.zombie.name
aby otrzymać imię

108
00:05:16,430 --> 00:05:20,660
zombie, który stworzył tego tweeta.
W tym wypadku - Bob.

109
00:05:20,660 --> 00:05:23,640
Aby odkryć jak działa druga
strona relacji, możemy wybrać

110
00:05:23,640 --> 00:05:24,980
określnego zombie.

111
00:05:27,480 --> 00:05:30,070
Możemy policzyć liczbę tweetów
na tym zombie a jeśli wywołamy

112
00:05:30,070 --> 00:05:34,540
ash.tweets, otrzymamy z powrotem
tablice (array) ze wszystkimi

113
00:05:34,540 --> 00:05:37,090
tweetami jakie stworzył
dany zombie.

114
00:05:37,090 --> 00:05:39,950
Nadszedł czas aby wrócić do
kodowania wraz z Zobmie Lab

115
00:05:39,950 --> 00:05:41,200
numer 2.

Translation Credits
00:05:41,200 --> 00:05:45,000
Tłumaczenie: Filip.Bartuzi.me
Korekta: Krzysztof Kanabaj